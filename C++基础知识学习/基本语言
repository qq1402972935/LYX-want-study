一.static关键字的作用
1.全局静态变量：在静态存储区，程序运行期间一直存在，自动初始化为0，在声明它的文件之外是不可见的。
2.局部静态变量：函数内声明了静态变量，函数结束时也不会清楚，也会自动初始化为0，作用域是该函数内。
3.静态函数：智能在声明的cpp内使用。
 4.类的静态成员：所有对象共享的成员。不需要this指针，并且不能和const一起使用，因为const需要this指针。
 5.类的静态函数：他仅能访问类的静态成员和静态函数，不能将静态成员函数定为虚函数。 需程序员手动指定初始化，否则编译不会报错，link会报错。修饰成员函数，用命名空间表示。
 
 二.C++和C的区别
 C++是面向对象的编程语言，而C语言是面向过程的编程语言。
 1、兼容C语言的部分。
 2、面向对象的C++。封装、继承、多态、虚函数、虚表指针。
 3、泛型编程，模版、STL。
 
 三.C++中四种cast转换
 C++中四种转化类型是static_cast,dynamic_cast,const_cast,reinterpret_cast。
 1.static_cast:静态类型转换，一般代码中用的最多，用来转换常量类型，或者子类指针/引用转父类。多态向上转化，向下转化为知。
 2.const_static:将const变量修改为非const变量。
 3.dynamic_static:用于动态类型转化，只能用于含有虚函数的类。用于类层次间的向上和向下转化。只能转指针或引用，如果是向下转化，抓化失败时，对指针返回
 NULL，对引用抛异常。
 4.reinterpret_cast:几乎什么都能转，但是容易出现问题。
 
 四.引用和指针的区别
 1.指针有自己的一块空间，引用只是一个别名。
 2.使用sizeof看指针的大小是4，而引用是被引用对象的大小。
 3.指针可以被初始化为NULL，而引用必须被初始化且必须是一个已有对象的引用。
 4.作为参数传递时，指针需要解引用。
 5.可以有const指针，但是没有const引用。
 6.指针在使用中指向其他对象。
 7.指针可以有多级，而引用只有一级。
 8.反回动态分配的对象或内存时，必须使用指针，否则会内存泄漏。
 
 五.智能指针
 auto_ptr,unique_ptr,weak_ptr,shared_ptr
 1.auto_ptr：存在潜在的内存崩溃问题。被unique_ptr替换。
 2.unique_ptr:实现独占式拥有或严格拥有概念，保证同一时间内只有一个智能指针可以指向该对象。对于避免资源泄露特别有用。
 3.shared_ptr:实现共享式拥有概念。多个智能指针可以指向相同对象，该对象和其相关资源会在“最后一个引用被销毁”时候释放。
 4.weak_ptr:协助shared_ptr。
