bfs算法
//定义结构体
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
    if (root == NULL) return 0;
    queue<TreeNode*> q;                        //新建队列q
    q.push(root);                             //把根结点放到队列q
    // root 本身就是一层，depth 初始化为 1
    int depth = 1;

    while (!q.empty()) {
        int sz = q.size();
        /* 将当前队列中的所有节点向四周扩散 */
        for (int i = 0; i < sz; i++) {
            TreeNode *cur = q.front();  //将队列中最后一个结点的指针传递给cur
            q.pop();                    //释放队列中最后一个元素
            /* 判断是否到达终点 */
            if (cur->left == NULL && cur->right == NULL) 
                return depth;
            /* 将 cur 的相邻节点加入队列 */
            if (cur->left != NULL)     //同时走了每一条路径，当触发结束条件时，当前路径最短
                q.push(cur->left);
            if (cur->right != NULL) 
                q.push(cur->right);
        }
        /* 这里增加步数 */
        depth++;
    }
    return depth;
}
};


bfs算法

解题关键
1.叶子节点的定义是左孩子和右孩子都为 null 时叫做叶子节点
2.当 root 节点左右孩子都为空时，返回 1
3.当 root 节点左右孩子有一个为空时，返回不为空的孩子节点的深度
4.当 root 节点左右孩子都不为空时，返回左右孩子较小深度的节点值

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        // 此题需注意叶子节点的定义，比较抽象，可以想象一下输入为[1,2]的情况，
        // 此时如果单纯返回 1 + min(minDepth(root->left), minDepth(root->right))，则得 1，因为结点1的右子节点深度计算出来为 0，
        // 而实际上，节点2才是符合要求的节点。所以不能单纯的递归比较2个子节点谁的深度小。

        // 首先，节点为空，直接返回0
        if(root == nullptr) return 0;
        
        // 其次，若当前节点的左右子节点均存在，说明***当前节点不是叶子节点，其孩子节点的性质也无法判定***，故返回较小的孩子节点深度
        if(root->left && root->right) return 1 + min(minDepth(root->left), minDepth(root->right));
        
        // 最后，若当前节点的左右子节点有一个不存在，则说明***当前节点的子节点中存在叶子节点***，故返回不为空的孩子节点（叶子节点）的深度
        // 当然了，若当前节点的左右子节点都不存在，那它就是叶子节点，总深度直接 +1 就好了，也符合这个 return 句法。
        return 1 + minDepth(root->left)+ minDepth(root->right);
    }
};
